#!/usr/bin/env node

const fs = require('fs');
const { join, resolve } = require('path');
const axios = require('axios');
const raml = require('raml-1-parser');

const readRaml = require('../src/read_raml');
const { validate, output } = require('../src/validate');
const { loadConfig, jsonPath, replaceUriParmaters } = require('../src/util');

const config = loadConfig(fs.readFileSync('./.raml-config.json', 'utf8'));

const env = process.env.NODE_ENV;
let host = `http://localhost:${config.port}`;
if (config.runner && env) {
  host = config.runner[env];
}

console.log(`HOST: ${host}`);
axios.defaults.baseURL = host;

const apiJSON = raml.loadApiSync(join(config.raml, config.main), {
  serializeMetadata: false
});
const webApiArr = readRaml.getWebApiArr(apiJSON);
const definitionSchema = readRaml.getDefinitionSchama(apiJSON);

const getResponseByStatusCode = (code, responses) => {
  let response;
  responses.forEach(resp => {
    if (resp.code === code) {
      response = resp;
    }
  });
  return response;
};

const send = async webApi => {
  let requestPath = webApi.absoluteUri;
  const beginTime = Date.now();
  try {
    if (webApi.uriParameters) {
      replaceUriParmaters(requestPath, (match, expression) => {
        requestPath = requestPath.replace(
          match,
          webApi.uriParameters[expression]
        );
      });
    }

    const response = await axios(requestPath, {
      method: webApi.method,
      data: webApi.body ? webApi.body.value : {},
      params: webApi.queryParameter
    });

    const { runner } = webApi;
    if (runner) {
      const { after } = runner;
      // eslint-disable-next-line
      const afterModule = require(resolve(after));
      if (typeof afterModule === 'function') {
        afterModule(axios, response);
      }
    }
    const { data, request } = response;

    const resp = getResponseByStatusCode(response.status, webApi.responses);
    if (!resp) {
      output(false, "can't find code by responses", '', request);
    }

    if (!resp.schema) return;
    try {
      const { valid, error } = validate(definitionSchema, resp.schema, data);
      let validInfo = '';
      let msg = '';
      if (!valid) {
        let result = data;
        const { message, dataPath } = error;
        msg = message;
        if (dataPath) {
          result = jsonPath(data, dataPath);
        }
        validInfo = `info:${dataPath}\n${JSON.stringify(result, null, '\t')}\n`;
      }
      output(valid, msg, validInfo, request, Date.now() - beginTime);
    } catch (error) {
      output(false, error.message, '', request, Date.now() - beginTime);
    }
  } catch (err) {
    console.log(err);
    output(
      false,
      err.message,
      '',
      // eslint-disable-next-line no-underscore-dangle
      err.request._currentRequest,
      Date.now() - beginTime
    );
  }
};

webApiArr.sort(webApi => (webApi.runner ? -1 : 1));

const sendRunner = async () => {
  const webApi = webApiArr.shift();
  if (!webApi.runner) {
    webApiArr.unshift(webApi);
    webApiArr.forEach(send);
    return;
  }
  await send(webApi);
  sendRunner();
};

sendRunner();
